'use strict';

document.addEventListener("DOMContentLoaded", () => {
    console.log('Скрипт отработал корректно')
});


'use strict'

document.addEventListener("DOMContentLoaded", () => {

    /* 1. Ручная прокрутка элементов Галереи с помощью стрелок*/
    
    const slider = document.querySelectorAll(".gallery__item");     // создаем переменную находя блок по классу

    if (slider) {                                           // проверяем существование элемента в DOM
        console.log('Константа slider существует');
    
        /* 
        *   Алгоритм
        *
        *   1. Начало.
        *   2.1. Проверка условия (навешиваем слушатель событий на кликанье на левую кнопку скролла): если происходит клик на левую кнопку скролла.
        *       2.1.1. Да: Получаем все элементы (изображения) (создание переменной, которая не будет меняться).
        *       2.1.2. Нет: Конец
        *   2.2. Проверка условия (навешиваем слушатель событий на кликанье на правую кнопку скролла): если происходит клик на правую кнопку скролла.
        *       2.2.1. Да: Получаем все элементы (изображения) (создание переменной, которая не будет меняться).
        *       2.2.2. Нет: Конец
        *   3. Проверка условия (проверка массива): массив не пустой.
        *       3.1. Да: Проверка условия: произошел клик по левой кнопке.
        *           3.1.1. Да: Скролл элементов влево
        *           3.1.2. Нет: Проверка условия: произошел клик по правой кнопке скролла.
        *               3.1.2.1. Да: Скролл элементов вправо
        *               3.1.2.2. Нет: Конец
        *       3.2. Нет: Конец
        *   4. Конец
        * 
        *   Блок-схема: /images/block_schema.gallery.png
        */

// Переменная, которая хранит текущий индекс первой карточки, отображаемой в слайдере. Изначально она равна 0, что означает, что первая карточка будет видна.
let currentIndex = 0; 

// объявляем переменную prevButton и сохраняем в нее кнопку для перехода к предыдущей группе карточек
const prevButton = document.querySelector(".gallery__left");

// объявляем переменную nextButton и сохраняем в нее кнопку для перехода к следующей группе карточек
const nextButton = document.querySelector(".gallery__right");

//объявлем переменную для хранения количества отображаемых карточек
const visibleCards = 4;

// Вызываем функцию updateSlider() для первоначальной настройки отображения карточек. 
updateSlider();

//Для кнопки «предыдущий» добавляем обработчик события клика по этой кнопке:
prevButton.addEventListener("click", () => {
    // Если индекс у карточки (currentIndex) больше 0, то уменьшаем его на 1, чтобы показать предыдущую карточку.
    if (currentIndex > 0) {
        currentIndex--;
    }
    // Иначе переход к последним карточкам, если мы уже находимся на первой 
    else {
        currentIndex = slider.length - visibleCards;
    }
    //Теперь нужно обновить отображение карточек на экране, вызвав функцию updateSlider:
    updateSlider();
});

// Для кнопки «следующий» добавляем обработчик события клика по этой кнопке:
nextButton.addEventListener("click", () => {
    // Если индекс у карточки (currentIndex) меньше, чем индекс первой карточки в последней группе, то мы можем увеличить currentIndex на 1 и перейти к следующей карточке
    if (currentIndex < slider.length - visibleCards) {
        currentIndex++;
    }
    // Иначе если индекс у карточки (currentIndex) больше 0, то уменьшаем его на 1, чтобы показать предыдущую карточку.
    else {
        currentIndex = 0; // Переход к началу карточек
    }
   //Теперь нужно обновить отображение карточек на экране, вызвав функцию updateSlider:
    updateSlider();
});

// Создаем функцию, которая отвечает за обновление отображения карточек в слайдере
function updateSlider() {
    // Проходим по каждому элементу массива slider с помощью цикла forEach. Внутри функции 2 переменные: item – текущая карточка, а index — его индекс в массиве.
    slider.forEach((item, index) => {
        // Проверяем, нужно ли показывать карточку (находится ли индекс карточки в пределах видимых карточек?)
	// Если индекс карточки находится в пределах видимых карточек:
        if (index >= currentIndex && index < currentIndex + visibleCards) {
            // Показываем карточку
            item.style.display = "block";
        }
        // Иначе скрываем карточку 
        else {
            item.style.display = "none";
        }
    });
}
    }
});


'use strict'

document.addEventListener('DOMContentLoaded', () => {

    /* 2. Исключение накладывания контента на хедер при скроле/прокрутке страницы */

    const header = document.querySelector('.header');       // создаем переменную находя блок по классу

    if (header) {                                           // проверяем существование элемента в DOM
        console.log('Константа header существует');

        /* 
        *   Алгоритм
        *
        *   1. Начало.
        *   2. Получаем высоту блока/элемента (создание переменной, которая не будет меняться).
        *   3. Проверка условия (навешиваем слушатель событий на scroll страницы и ожидаем ее прокрутку): если страница прокручивается.
        *       3.1. Да: Получаем значение насколько прокрутили страницу (создание переменной, которая будет меняться).
        *           3.1.1 Проверка условия (сравниваем высоту элемента и значение прокрученной страницы): если расстояние от верха страницы больше высоты элемента
        *               3.1.1.1. Да: устанавливаем класс модификатора на элемент
        *               3.1.1.2. Нет (если расстояние от верха экрана меньше высоты элемента): удаляем класс модификатора у элемента
        *       3.2. Нет: Конец
        *   4. Конец
        * 
        *   Блок-схема: /images/block-schema.png
        */

        const heightHeader = header.offsetHeight;           // определяем высоту блока, включая внутренние отступы

        document.addEventListener('scroll', () => {         // навешиваем слушатель событий на scroll страницы и ожидаем ее прокрутку

            console.log('Страница скролится');

            let scrollPageY = this.scrollY;                 // получаем значение насколько прокрутили страницу

            if (scrollPageY > heightHeader) {               // условие: если расстояние от верха страницы больше высоты элемента
                header.classList.add('header--scroll')      // устанавливаем класс модификатора на элемент
            } else {
                header.classList.remove('header--scroll')   // удаляем класс модификатора у элемента
            }

        })
    }
});